// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	HelloRequest
	HelloReply
*/
package crypto

import (
	fmt "fmt"
	"log"

	proto "github.com/golang/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BFTX_Payload struct {
	Shipper             string
	BolNum              int
	RefNum              int
	Consignee           string
	Vessel              int
	PortOfLoading       int
	PortOfDischarge     int
	NotifyAddress       string
	DescOfGoods         string
	GrossWeight         int
	FreightPayableAmt   int
	FreightAdvAmt       int
	GeneralInstructions string
	DateShipped         string
	NumBol              int
	ISSUEDETAILS        IssueDetails

	MASTERINFO MasterInfo

	AGENTFORMASTER AgentForMaster

	AGENTFOROWNER      AgentForOwner
	EncryptionMetaData string
}

type EncryptionField struct {
	FieldName      string
	AuthorizedUser string
}

type Publickeys struct {
	UserID  string
	keyfile string
}

type BFTX_encryptionConfig struct {
	Version          string
	group            string
	Recipients       string
	EncryptionFields EncryptionField
	Publickeys       Publickeys
}

type AgentForMaster struct {
	FirstName string
	LastName  string
	Sig       string
}

type AgentForOwner struct {
	FirstName             string
	LastName              string
	Sig                   string
	ConditionsForCarriage string
}

type MasterInfo struct {
	FirstName string
	LastName  string
	Sig       string
}

type BFTX_Decode_request struct {
	bftxtrans BFTX_transaction
	KeyName   string
}

func (m *BFTX_Decode_request) Reset()         { *m = BFTX_Decode_request{} }
func (m *BFTX_Decode_request) String() string { return proto.CompactTextString(m) }
func (*BFTX_Decode_request) ProtoMessage()    {}

// IssueDetails struct
type IssueDetails struct {
	PlaceOfIssue string
	DateOfIssue  string
}

type BFTX_transaction struct {
	BFTX_Payload BFTX_Payload
}

type BFTX_Encode_request struct {
	bftxtrans  BFTX_transaction
	bftxconfig BFTX_encryptionConfig
}

func (m *BFTX_Encode_request) Reset()         { *m = BFTX_Encode_request{} }
func (m *BFTX_Encode_request) String() string { return proto.CompactTextString(m) }
func (*BFTX_Encode_request) ProtoMessage()    {}

func init() {
	proto.RegisterType((*BFTX_Encode_request)(nil), "crypto.BFTX_Encode_request")
	proto.RegisterType((*BFTX_Decode_request)(nil), "crypto.BFTX_Decode_request")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type EncryptClient interface {
	BFTX_Encode(ctx context.Context, in *BFTX_Encode_request) *BFTX_transaction
}

type encryptClient struct {
	cc *grpc.ClientConn
}

func NewEncryptionClient(cc *grpc.ClientConn) EncryptClient {
	return &encryptClient{cc}
}

func (c *encryptClient) BFTX_Encode(ctx context.Context, in *BFTX_Encode_request) *BFTX_transaction {
	out := new(BFTX_transaction)
	err := grpc.Invoke(ctx, "/crypto.BFSaberService/BFTX_Encode", in, out, c.cc)
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	return out
}
