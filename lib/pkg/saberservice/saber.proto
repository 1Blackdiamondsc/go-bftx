syntax = "proto3";

package saberservice;

// service, encrypt a plain text into a cypertext using saber
service BFSaberService {
    // request a service of encryption
    rpc BFTX_Encode(BFTX_Encode_request) returns (BFTX_transaction) {};
    // request a service for decryption
    rpc BFTX_Decode(BFTX_Decode_request) returns (BFTX_transaction) {}
}

// The BFTX encryption transaction data structure (test version)
message BFTX_Encode_request{
    BFTX_transaction bftxtrans = 1;
    BFTX_encryptionConfig bftxconfig = 2;
}
// The BFTX decryption transaction data structure (test version)
message BFTX_Decode_request{
    BFTX_transaction bftxtrans = 1;
    string KeyName = 2;
}

message BFTX_transaction {
    BFTX_Payload properties = 1;
}

message BFTX_Payload{
    string Shipper = 1;
    int32 BolNum = 2;
    int64 RefNum = 3;
    string Consignee = 4;
    int64 Vessel = 5;
    string PortOfLoading = 6;
    string PortOfDischarge = 7;
    string NotifyAddress = 8;
    string DescOfGoods = 9;
    int32 GrossWeight = 10;
    int32 FreightPayableAmt = 11;
    int64 FreightAdvAmt = 12;
    string GeneralInstructions = 13;
    string DateShipped = 14;
    int64 NumBol = 15;

    ISSUEDETAILS IssueDetails = 16;

    MASTERINFO MasterInfo = 17;

    AGENTFORMASTER AgentForMaster = 18;

    AGENTFOROWNER AgentForOwner = 19;
    string EncryptionMetaData = 20;
}

message ISSUEDETAILS{
    string PlaceOfIssue = 1;
    string DateOfIssue = 2;
}

message MASTERINFO{
    string FirstName = 1;
    string LastName = 2;
    string Sig = 3;
}

message AGENTFORMASTER{
    string FirstName = 1;
    string LastName = 2;
    string Sig = 3;
}

message AGENTFOROWNER{
    string FirstName = 1;
    string LastName = 2;
    string Sig = 3;
    string ConditionsForCarriage = 4;
}

message BFTX_encryptionConfig{
    string version = 1;
    string group = 2;
    repeated string recipients = 3;
    repeated ENCRYPTIONFIELD encryptionfields = 4;
    repeated PUBLICKEYS publickeys = 5;

}

message ENCRYPTIONFIELD{
    string fieldname = 1;
    repeated string authorizeduser= 2;
}

message PUBLICKEYS{
    string userid = 1;
    string keyfile = 2;
}
