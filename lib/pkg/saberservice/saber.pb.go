// Code generated by protoc-gen-go. DO NOT EDIT.
// source: saber.proto

/*
Package saberservice is a generated protocol buffer package.

It is generated from these files:
	saber.proto

It has these top-level messages:
	BFTX_EncodeRequest
	BFTX_DecodeRequest
	BFTXTransaction
	SignKey
	BFTX_Payload
	ISSUEDETAILS
	MASTERINFO
	AGENTFORMASTER
	AGENTFOROWNER
	BFTXEncryptionConfig
	ENCRYPTIONFIELD
	PUBLICKEYS
*/
package saberservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The BFTX encryption transaction data structure (test version)
type BFTX_EncodeRequest struct {
	Bftxtrans  *BFTXTransaction      `protobuf:"bytes,1,opt,name=bftxtrans" json:"bftxtrans,omitempty"`
	Bftxconfig *BFTXEncryptionConfig `protobuf:"bytes,2,opt,name=bftxconfig" json:"bftxconfig,omitempty"`
}

func (m *BFTX_EncodeRequest) Reset()                    { *m = BFTX_EncodeRequest{} }
func (m *BFTX_EncodeRequest) String() string            { return proto.CompactTextString(m) }
func (*BFTX_EncodeRequest) ProtoMessage()               {}
func (*BFTX_EncodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BFTX_EncodeRequest) GetBftxtrans() *BFTXTransaction {
	if m != nil {
		return m.Bftxtrans
	}
	return nil
}

func (m *BFTX_EncodeRequest) GetBftxconfig() *BFTXEncryptionConfig {
	if m != nil {
		return m.Bftxconfig
	}
	return nil
}

// The BFTX decryption transaction data structure (test version)
type BFTX_DecodeRequest struct {
	Bftxtrans *BFTXTransaction `protobuf:"bytes,1,opt,name=bftxtrans" json:"bftxtrans,omitempty"`
	KeyName   string           `protobuf:"bytes,2,opt,name=KeyName" json:"KeyName,omitempty"`
}

func (m *BFTX_DecodeRequest) Reset()                    { *m = BFTX_DecodeRequest{} }
func (m *BFTX_DecodeRequest) String() string            { return proto.CompactTextString(m) }
func (*BFTX_DecodeRequest) ProtoMessage()               {}
func (*BFTX_DecodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BFTX_DecodeRequest) GetBftxtrans() *BFTXTransaction {
	if m != nil {
		return m.Bftxtrans
	}
	return nil
}

func (m *BFTX_DecodeRequest) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

type BFTXTransaction struct {
	Properties *BFTX_Payload `protobuf:"bytes,1,opt,name=Properties" json:"Properties,omitempty"`
	Id         string        `protobuf:"bytes,2,opt,name=Id" json:"Id,omitempty"`
	PrivateKey *SignKey      `protobuf:"bytes,3,opt,name=PrivateKey" json:"PrivateKey,omitempty"`
	Signhash   string        `protobuf:"bytes,4,opt,name=Signhash" json:"Signhash,omitempty"`
	Signature  string        `protobuf:"bytes,5,opt,name=Signature" json:"Signature,omitempty"`
	Verified   bool          `protobuf:"varint,6,opt,name=Verified" json:"Verified,omitempty"`
}

func (m *BFTXTransaction) Reset()                    { *m = BFTXTransaction{} }
func (m *BFTXTransaction) String() string            { return proto.CompactTextString(m) }
func (*BFTXTransaction) ProtoMessage()               {}
func (*BFTXTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BFTXTransaction) GetProperties() *BFTX_Payload {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *BFTXTransaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BFTXTransaction) GetPrivateKey() *SignKey {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *BFTXTransaction) GetSignhash() string {
	if m != nil {
		return m.Signhash
	}
	return ""
}

func (m *BFTXTransaction) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *BFTXTransaction) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

type SignKey struct {
	Curve string `protobuf:"bytes,1,opt,name=Curve" json:"Curve,omitempty"`
	X     string `protobuf:"bytes,2,opt,name=X" json:"X,omitempty"`
	Y     string `protobuf:"bytes,3,opt,name=Y" json:"Y,omitempty"`
	D     string `protobuf:"bytes,4,opt,name=D" json:"D,omitempty"`
}

func (m *SignKey) Reset()                    { *m = SignKey{} }
func (m *SignKey) String() string            { return proto.CompactTextString(m) }
func (*SignKey) ProtoMessage()               {}
func (*SignKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SignKey) GetCurve() string {
	if m != nil {
		return m.Curve
	}
	return ""
}

func (m *SignKey) GetX() string {
	if m != nil {
		return m.X
	}
	return ""
}

func (m *SignKey) GetY() string {
	if m != nil {
		return m.Y
	}
	return ""
}

func (m *SignKey) GetD() string {
	if m != nil {
		return m.D
	}
	return ""
}

type BFTX_Payload struct {
	Shipper             string          `protobuf:"bytes,1,opt,name=Shipper" json:"Shipper,omitempty"`
	BolNum              int32           `protobuf:"varint,2,opt,name=BolNum" json:"BolNum,omitempty"`
	RefNum              int64           `protobuf:"varint,3,opt,name=RefNum" json:"RefNum,omitempty"`
	Vessel              int64           `protobuf:"varint,4,opt,name=Vessel" json:"Vessel,omitempty"`
	PortOfLoading       string          `protobuf:"bytes,5,opt,name=PortOfLoading" json:"PortOfLoading,omitempty"`
	PortOfDischarge     string          `protobuf:"bytes,6,opt,name=PortOfDischarge" json:"PortOfDischarge,omitempty"`
	UnitOfVolume        string          `protobuf:"bytes,7,opt,name=UnitOfVolume" json:"UnitOfVolume,omitempty"`
	NotifyAddress       string          `protobuf:"bytes,8,opt,name=NotifyAddress" json:"NotifyAddress,omitempty"`
	DescOfGoods         string          `protobuf:"bytes,9,opt,name=DescOfGoods" json:"DescOfGoods,omitempty"`
	GrossWeight         int32           `protobuf:"varint,10,opt,name=GrossWeight" json:"GrossWeight,omitempty"`
	FreightPayableAmt   int32           `protobuf:"varint,11,opt,name=FreightPayableAmt" json:"FreightPayableAmt,omitempty"`
	FreightAdvAmt       int64           `protobuf:"varint,12,opt,name=FreightAdvAmt" json:"FreightAdvAmt,omitempty"`
	GeneralInstructions string          `protobuf:"bytes,13,opt,name=GeneralInstructions" json:"GeneralInstructions,omitempty"`
	DateShipped         string          `protobuf:"bytes,14,opt,name=DateShipped" json:"DateShipped,omitempty"`
	IssueDetails        *ISSUEDETAILS   `protobuf:"bytes,15,opt,name=IssueDetails" json:"IssueDetails,omitempty"`
	NumBol              int64           `protobuf:"varint,16,opt,name=NumBol" json:"NumBol,omitempty"`
	MasterInfo          *MASTERINFO     `protobuf:"bytes,17,opt,name=MasterInfo" json:"MasterInfo,omitempty"`
	AgentForMaster      *AGENTFORMASTER `protobuf:"bytes,18,opt,name=AgentForMaster" json:"AgentForMaster,omitempty"`
	AgentForOwner       *AGENTFOROWNER  `protobuf:"bytes,19,opt,name=AgentForOwner" json:"AgentForOwner,omitempty"`
	EncryptionMetaData  string          `protobuf:"bytes,20,opt,name=EncryptionMetaData" json:"EncryptionMetaData,omitempty"`
}

func (m *BFTX_Payload) Reset()                    { *m = BFTX_Payload{} }
func (m *BFTX_Payload) String() string            { return proto.CompactTextString(m) }
func (*BFTX_Payload) ProtoMessage()               {}
func (*BFTX_Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BFTX_Payload) GetShipper() string {
	if m != nil {
		return m.Shipper
	}
	return ""
}

func (m *BFTX_Payload) GetBolNum() int32 {
	if m != nil {
		return m.BolNum
	}
	return 0
}

func (m *BFTX_Payload) GetRefNum() int64 {
	if m != nil {
		return m.RefNum
	}
	return 0
}

func (m *BFTX_Payload) GetVessel() int64 {
	if m != nil {
		return m.Vessel
	}
	return 0
}

func (m *BFTX_Payload) GetPortOfLoading() string {
	if m != nil {
		return m.PortOfLoading
	}
	return ""
}

func (m *BFTX_Payload) GetPortOfDischarge() string {
	if m != nil {
		return m.PortOfDischarge
	}
	return ""
}

func (m *BFTX_Payload) GetUnitOfVolume() string {
	if m != nil {
		return m.UnitOfVolume
	}
	return ""
}

func (m *BFTX_Payload) GetNotifyAddress() string {
	if m != nil {
		return m.NotifyAddress
	}
	return ""
}

func (m *BFTX_Payload) GetDescOfGoods() string {
	if m != nil {
		return m.DescOfGoods
	}
	return ""
}

func (m *BFTX_Payload) GetGrossWeight() int32 {
	if m != nil {
		return m.GrossWeight
	}
	return 0
}

func (m *BFTX_Payload) GetFreightPayableAmt() int32 {
	if m != nil {
		return m.FreightPayableAmt
	}
	return 0
}

func (m *BFTX_Payload) GetFreightAdvAmt() int64 {
	if m != nil {
		return m.FreightAdvAmt
	}
	return 0
}

func (m *BFTX_Payload) GetGeneralInstructions() string {
	if m != nil {
		return m.GeneralInstructions
	}
	return ""
}

func (m *BFTX_Payload) GetDateShipped() string {
	if m != nil {
		return m.DateShipped
	}
	return ""
}

func (m *BFTX_Payload) GetIssueDetails() *ISSUEDETAILS {
	if m != nil {
		return m.IssueDetails
	}
	return nil
}

func (m *BFTX_Payload) GetNumBol() int64 {
	if m != nil {
		return m.NumBol
	}
	return 0
}

func (m *BFTX_Payload) GetMasterInfo() *MASTERINFO {
	if m != nil {
		return m.MasterInfo
	}
	return nil
}

func (m *BFTX_Payload) GetAgentForMaster() *AGENTFORMASTER {
	if m != nil {
		return m.AgentForMaster
	}
	return nil
}

func (m *BFTX_Payload) GetAgentForOwner() *AGENTFOROWNER {
	if m != nil {
		return m.AgentForOwner
	}
	return nil
}

func (m *BFTX_Payload) GetEncryptionMetaData() string {
	if m != nil {
		return m.EncryptionMetaData
	}
	return ""
}

type ISSUEDETAILS struct {
	PlaceOfIssue string `protobuf:"bytes,1,opt,name=PlaceOfIssue" json:"PlaceOfIssue,omitempty"`
	DateOfIssue  string `protobuf:"bytes,2,opt,name=DateOfIssue" json:"DateOfIssue,omitempty"`
}

func (m *ISSUEDETAILS) Reset()                    { *m = ISSUEDETAILS{} }
func (m *ISSUEDETAILS) String() string            { return proto.CompactTextString(m) }
func (*ISSUEDETAILS) ProtoMessage()               {}
func (*ISSUEDETAILS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ISSUEDETAILS) GetPlaceOfIssue() string {
	if m != nil {
		return m.PlaceOfIssue
	}
	return ""
}

func (m *ISSUEDETAILS) GetDateOfIssue() string {
	if m != nil {
		return m.DateOfIssue
	}
	return ""
}

type MASTERINFO struct {
	FirstName string `protobuf:"bytes,1,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=LastName" json:"LastName,omitempty"`
	Sig       string `protobuf:"bytes,3,opt,name=Sig" json:"Sig,omitempty"`
}

func (m *MASTERINFO) Reset()                    { *m = MASTERINFO{} }
func (m *MASTERINFO) String() string            { return proto.CompactTextString(m) }
func (*MASTERINFO) ProtoMessage()               {}
func (*MASTERINFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MASTERINFO) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *MASTERINFO) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *MASTERINFO) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

type AGENTFORMASTER struct {
	FirstName string `protobuf:"bytes,1,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=LastName" json:"LastName,omitempty"`
	Sig       string `protobuf:"bytes,3,opt,name=Sig" json:"Sig,omitempty"`
}

func (m *AGENTFORMASTER) Reset()                    { *m = AGENTFORMASTER{} }
func (m *AGENTFORMASTER) String() string            { return proto.CompactTextString(m) }
func (*AGENTFORMASTER) ProtoMessage()               {}
func (*AGENTFORMASTER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AGENTFORMASTER) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *AGENTFORMASTER) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *AGENTFORMASTER) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

type AGENTFOROWNER struct {
	FirstName             string `protobuf:"bytes,1,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName              string `protobuf:"bytes,2,opt,name=LastName" json:"LastName,omitempty"`
	Sig                   string `protobuf:"bytes,3,opt,name=Sig" json:"Sig,omitempty"`
	ConditionsForCarriage string `protobuf:"bytes,4,opt,name=ConditionsForCarriage" json:"ConditionsForCarriage,omitempty"`
}

func (m *AGENTFOROWNER) Reset()                    { *m = AGENTFOROWNER{} }
func (m *AGENTFOROWNER) String() string            { return proto.CompactTextString(m) }
func (*AGENTFOROWNER) ProtoMessage()               {}
func (*AGENTFOROWNER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AGENTFOROWNER) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *AGENTFOROWNER) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *AGENTFOROWNER) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

func (m *AGENTFOROWNER) GetConditionsForCarriage() string {
	if m != nil {
		return m.ConditionsForCarriage
	}
	return ""
}

type BFTXEncryptionConfig struct {
	Version          string             `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Group            string             `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	Recipients       []string           `protobuf:"bytes,3,rep,name=recipients" json:"recipients,omitempty"`
	Encryptionfields []*ENCRYPTIONFIELD `protobuf:"bytes,4,rep,name=encryptionfields" json:"encryptionfields,omitempty"`
	Publickeys       []*PUBLICKEYS      `protobuf:"bytes,5,rep,name=publickeys" json:"publickeys,omitempty"`
}

func (m *BFTXEncryptionConfig) Reset()                    { *m = BFTXEncryptionConfig{} }
func (m *BFTXEncryptionConfig) String() string            { return proto.CompactTextString(m) }
func (*BFTXEncryptionConfig) ProtoMessage()               {}
func (*BFTXEncryptionConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BFTXEncryptionConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BFTXEncryptionConfig) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *BFTXEncryptionConfig) GetRecipients() []string {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *BFTXEncryptionConfig) GetEncryptionfields() []*ENCRYPTIONFIELD {
	if m != nil {
		return m.Encryptionfields
	}
	return nil
}

func (m *BFTXEncryptionConfig) GetPublickeys() []*PUBLICKEYS {
	if m != nil {
		return m.Publickeys
	}
	return nil
}

type ENCRYPTIONFIELD struct {
	Fieldname      string   `protobuf:"bytes,1,opt,name=fieldname" json:"fieldname,omitempty"`
	Authorizeduser []string `protobuf:"bytes,2,rep,name=authorizeduser" json:"authorizeduser,omitempty"`
}

func (m *ENCRYPTIONFIELD) Reset()                    { *m = ENCRYPTIONFIELD{} }
func (m *ENCRYPTIONFIELD) String() string            { return proto.CompactTextString(m) }
func (*ENCRYPTIONFIELD) ProtoMessage()               {}
func (*ENCRYPTIONFIELD) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ENCRYPTIONFIELD) GetFieldname() string {
	if m != nil {
		return m.Fieldname
	}
	return ""
}

func (m *ENCRYPTIONFIELD) GetAuthorizeduser() []string {
	if m != nil {
		return m.Authorizeduser
	}
	return nil
}

type PUBLICKEYS struct {
	Userid  string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
	Keyfile string `protobuf:"bytes,2,opt,name=keyfile" json:"keyfile,omitempty"`
}

func (m *PUBLICKEYS) Reset()                    { *m = PUBLICKEYS{} }
func (m *PUBLICKEYS) String() string            { return proto.CompactTextString(m) }
func (*PUBLICKEYS) ProtoMessage()               {}
func (*PUBLICKEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PUBLICKEYS) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *PUBLICKEYS) GetKeyfile() string {
	if m != nil {
		return m.Keyfile
	}
	return ""
}

func init() {
	proto.RegisterType((*BFTX_EncodeRequest)(nil), "saberservice.BFTX_Encode_request")
	proto.RegisterType((*BFTX_DecodeRequest)(nil), "saberservice.BFTX_Decode_request")
	proto.RegisterType((*BFTXTransaction)(nil), "saberservice.BFTX_transaction")
	proto.RegisterType((*SignKey)(nil), "saberservice.SignKey")
	proto.RegisterType((*BFTX_Payload)(nil), "saberservice.BFTX_Payload")
	proto.RegisterType((*ISSUEDETAILS)(nil), "saberservice.ISSUEDETAILS")
	proto.RegisterType((*MASTERINFO)(nil), "saberservice.MASTERINFO")
	proto.RegisterType((*AGENTFORMASTER)(nil), "saberservice.AGENTFORMASTER")
	proto.RegisterType((*AGENTFOROWNER)(nil), "saberservice.AGENTFOROWNER")
	proto.RegisterType((*BFTXEncryptionConfig)(nil), "saberservice.BFTX_encryptionConfig")
	proto.RegisterType((*ENCRYPTIONFIELD)(nil), "saberservice.ENCRYPTIONFIELD")
	proto.RegisterType((*PUBLICKEYS)(nil), "saberservice.PUBLICKEYS")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BFSaberService service

type BFSaberServiceClient interface {
	// request a service of encryption
	BFTX_Encode(ctx context.Context, in *BFTX_EncodeRequest, opts ...grpc.CallOption) (*BFTXTransaction, error)
	// request a service for decryption
	BFTX_Decode(ctx context.Context, in *BFTX_DecodeRequest, opts ...grpc.CallOption) (*BFTXTransaction, error)
}

type bFSaberServiceClient struct {
	cc *grpc.ClientConn
}

func NewBFSaberServiceClient(cc *grpc.ClientConn) BFSaberServiceClient {
	return &bFSaberServiceClient{cc}
}

func (c *bFSaberServiceClient) BFTX_Encode(ctx context.Context, in *BFTX_EncodeRequest, opts ...grpc.CallOption) (*BFTXTransaction, error) {
	out := new(BFTXTransaction)
	err := grpc.Invoke(ctx, "/saberservice.BFSaberService/BFTX_Encode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bFSaberServiceClient) BFTX_Decode(ctx context.Context, in *BFTX_DecodeRequest, opts ...grpc.CallOption) (*BFTXTransaction, error) {
	out := new(BFTXTransaction)
	err := grpc.Invoke(ctx, "/saberservice.BFSaberService/BFTX_Decode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BFSaberService service

type BFSaberServiceServer interface {
	// request a service of encryption
	BFTX_Encode(context.Context, *BFTX_EncodeRequest) (*BFTXTransaction, error)
	// request a service for decryption
	BFTX_Decode(context.Context, *BFTX_DecodeRequest) (*BFTXTransaction, error)
}

func RegisterBFSaberServiceServer(s *grpc.Server, srv BFSaberServiceServer) {
	s.RegisterService(&_BFSaberService_serviceDesc, srv)
}

func _BFSaberService_BFTX_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BFTX_EncodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFSaberServiceServer).BFTX_Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saberservice.BFSaberService/BFTX_Encode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFSaberServiceServer).BFTX_Encode(ctx, req.(*BFTX_EncodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BFSaberService_BFTX_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BFTX_DecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFSaberServiceServer).BFTX_Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saberservice.BFSaberService/BFTX_Decode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFSaberServiceServer).BFTX_Decode(ctx, req.(*BFTX_DecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BFSaberService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "saberservice.BFSaberService",
	HandlerType: (*BFSaberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BFTX_Encode",
			Handler:    _BFSaberService_BFTX_Encode_Handler,
		},
		{
			MethodName: "BFTX_Decode",
			Handler:    _BFSaberService_BFTX_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "saber.proto",
}

func init() { proto.RegisterFile("saber.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1013 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdb, 0x6e, 0xe3, 0x36,
	0x10, 0xad, 0xe2, 0xcd, 0xc5, 0x63, 0xc7, 0xc9, 0x32, 0x9b, 0x82, 0x48, 0xb7, 0x8b, 0x54, 0x2d,
	0x8a, 0x3c, 0x14, 0x41, 0x91, 0xb6, 0x40, 0x51, 0x14, 0x0b, 0x38, 0xbe, 0x04, 0x42, 0x12, 0xdb,
	0xa0, 0x9d, 0x1b, 0x50, 0x60, 0xc1, 0x58, 0x23, 0x9b, 0x58, 0x59, 0x72, 0x49, 0x2a, 0xad, 0xfb,
	0x17, 0x7d, 0xeb, 0xa7, 0xf4, 0xb5, 0xdf, 0xd3, 0x7e, 0x44, 0x41, 0x4a, 0xb6, 0x25, 0xaf, 0x81,
	0x7d, 0xc9, 0x9b, 0xce, 0xe1, 0xcc, 0x99, 0xe1, 0x0c, 0x39, 0x22, 0x54, 0x14, 0x7f, 0x44, 0x79,
	0x3a, 0x95, 0xb1, 0x8e, 0x49, 0xd5, 0x02, 0x85, 0xf2, 0x49, 0x0c, 0xd1, 0xfd, 0xcb, 0x81, 0x83,
	0xf3, 0xf6, 0xe0, 0xfe, 0x5d, 0x2b, 0x1a, 0xc6, 0x3e, 0xbe, 0x93, 0xf8, 0x6b, 0x82, 0x4a, 0x93,
	0x9f, 0xa1, 0xfc, 0x18, 0xe8, 0xdf, 0xb5, 0xe4, 0x91, 0xa2, 0xce, 0xb1, 0x73, 0x52, 0x39, 0x7b,
	0x73, 0x9a, 0xf7, 0x3c, 0xb5, 0x5e, 0x76, 0x9d, 0x0f, 0xb5, 0x88, 0x23, 0xb6, 0x74, 0x20, 0x0d,
	0x00, 0x03, 0x86, 0x71, 0x14, 0x88, 0x11, 0xdd, 0xb0, 0xee, 0x5f, 0xae, 0x71, 0xc7, 0x68, 0x28,
	0x67, 0x53, 0xe3, 0xdd, 0xb0, 0xa6, 0x2c, 0xe7, 0xe6, 0x4e, 0xb2, 0xcc, 0x9a, 0xf8, 0x8c, 0x99,
	0x51, 0xd8, 0xbe, 0xc4, 0x59, 0x87, 0x4f, 0xd0, 0xa6, 0x55, 0x66, 0x73, 0xe8, 0xfe, 0xeb, 0xc0,
	0xfe, 0xaa, 0x27, 0xf9, 0x09, 0xa0, 0x27, 0xe3, 0x29, 0x4a, 0x2d, 0x70, 0x1e, 0xed, 0x68, 0x4d,
	0xb4, 0x1e, 0x9f, 0x85, 0x31, 0xf7, 0x59, 0xce, 0x9a, 0xd4, 0x60, 0xc3, 0xf3, 0xb3, 0x28, 0x1b,
	0x9e, 0x4f, 0x7e, 0x30, 0x5a, 0xe2, 0x89, 0x6b, 0xbc, 0xc4, 0x19, 0x2d, 0x59, 0xad, 0xc3, 0xa2,
	0x56, 0x5f, 0x8c, 0xa2, 0x4b, 0x9c, 0xb1, 0x9c, 0x21, 0x39, 0x82, 0x1d, 0x43, 0x8f, 0xb9, 0x1a,
	0xd3, 0x17, 0x56, 0x6c, 0x81, 0xc9, 0x6b, 0x28, 0x9b, 0x6f, 0xae, 0x13, 0x89, 0x74, 0xd3, 0x2e,
	0x2e, 0x09, 0xe3, 0x79, 0x8b, 0x52, 0x04, 0x02, 0x7d, 0xba, 0x75, 0xec, 0x9c, 0xec, 0xb0, 0x05,
	0x76, 0x3d, 0xd8, 0xce, 0x82, 0x91, 0x57, 0xb0, 0xd9, 0x48, 0xe4, 0x13, 0xda, 0xed, 0x95, 0x59,
	0x0a, 0x48, 0x15, 0x9c, 0xfb, 0x2c, 0x79, 0xe7, 0xde, 0xa0, 0x07, 0x9b, 0x72, 0x99, 0x39, 0x0f,
	0x06, 0x35, 0xb3, 0x5c, 0x9c, 0xa6, 0xfb, 0xcf, 0x16, 0x54, 0xf3, 0x45, 0x30, 0x35, 0xee, 0x8f,
	0xc5, 0x74, 0x8a, 0x32, 0x93, 0x9c, 0x43, 0xf2, 0x29, 0x6c, 0x9d, 0xc7, 0x61, 0x27, 0x99, 0x58,
	0xe5, 0x4d, 0x96, 0x21, 0xc3, 0x33, 0x0c, 0x0c, 0x6f, 0x62, 0x94, 0x58, 0x86, 0x0c, 0x7f, 0x8b,
	0x4a, 0x61, 0x68, 0xa3, 0x95, 0x58, 0x86, 0xc8, 0x57, 0xb0, 0xdb, 0x8b, 0xa5, 0xee, 0x06, 0x57,
	0x31, 0xf7, 0x45, 0x34, 0xca, 0xf6, 0x5e, 0x24, 0xc9, 0x09, 0xec, 0xa5, 0x44, 0x53, 0xa8, 0xe1,
	0x98, 0xcb, 0x11, 0xda, 0x32, 0x94, 0xd9, 0x2a, 0x4d, 0x5c, 0xa8, 0xde, 0x44, 0x42, 0x77, 0x83,
	0xdb, 0x38, 0x4c, 0x26, 0x48, 0xb7, 0xad, 0x59, 0x81, 0x33, 0x31, 0x3b, 0xb1, 0x16, 0xc1, 0xac,
	0xee, 0xfb, 0x12, 0x95, 0xa2, 0x3b, 0x69, 0xcc, 0x02, 0x49, 0x8e, 0xa1, 0xd2, 0x44, 0x35, 0xec,
	0x06, 0x17, 0x71, 0xec, 0x2b, 0x5a, 0xb6, 0x36, 0x79, 0xca, 0x58, 0x5c, 0xc8, 0x58, 0xa9, 0x3b,
	0x14, 0xa3, 0xb1, 0xa6, 0x60, 0x0b, 0x91, 0xa7, 0xc8, 0x37, 0xf0, 0xb2, 0x2d, 0xed, 0x67, 0x8f,
	0xcf, 0xf8, 0x63, 0x88, 0xf5, 0x89, 0xa6, 0x15, 0x6b, 0xf7, 0xe1, 0x82, 0xc9, 0x2b, 0x23, 0xeb,
	0xfe, 0x93, 0xb1, 0xac, 0xda, 0x52, 0x15, 0x49, 0xf2, 0x2d, 0x1c, 0x5c, 0x60, 0x84, 0x92, 0x87,
	0x5e, 0xa4, 0xb4, 0x4c, 0xec, 0xf1, 0x56, 0x74, 0xd7, 0xe6, 0xb7, 0x6e, 0xc9, 0xee, 0x84, 0x6b,
	0x4c, 0x5b, 0xe7, 0xd3, 0x5a, 0xb6, 0x93, 0x25, 0x45, 0xde, 0x42, 0xd5, 0x53, 0x2a, 0xc1, 0x26,
	0x6a, 0x2e, 0x42, 0x45, 0xf7, 0xd6, 0x5d, 0x0f, 0xaf, 0xdf, 0xbf, 0x69, 0x35, 0x5b, 0x83, 0xba,
	0x77, 0xd5, 0x67, 0x05, 0x7b, 0xd3, 0xdd, 0x4e, 0x32, 0x39, 0x8f, 0x43, 0xba, 0x9f, 0x76, 0x37,
	0x45, 0xe4, 0x47, 0x80, 0x6b, 0xae, 0x34, 0x4a, 0x2f, 0x0a, 0x62, 0xfa, 0xd2, 0xaa, 0xd2, 0xa2,
	0xea, 0x75, 0xbd, 0x3f, 0x68, 0x31, 0xaf, 0xd3, 0xee, 0xb2, 0x9c, 0x2d, 0x69, 0x42, 0xad, 0x3e,
	0xc2, 0x48, 0xb7, 0x63, 0x99, 0xb2, 0x94, 0x58, 0xef, 0xd7, 0x45, 0xef, 0xfa, 0x45, 0xab, 0x33,
	0x68, 0x77, 0x59, 0xaa, 0xc2, 0x56, 0x7c, 0x48, 0x1d, 0x76, 0xe7, 0x4c, 0xf7, 0xb7, 0x08, 0x25,
	0x3d, 0xb0, 0x22, 0x9f, 0xad, 0x17, 0xe9, 0xde, 0x75, 0x5a, 0x8c, 0x15, 0x3d, 0xc8, 0x29, 0x90,
	0xd6, 0x62, 0xb6, 0x5d, 0xa3, 0xe6, 0x4d, 0xae, 0x39, 0x7d, 0x65, 0x6b, 0xb8, 0x66, 0xc5, 0x1d,
	0x40, 0x35, 0x5f, 0x28, 0x73, 0x20, 0x7b, 0x21, 0x1f, 0x62, 0x37, 0xb0, 0x15, 0xcb, 0xee, 0x51,
	0x81, 0x9b, 0x37, 0x68, 0x6e, 0xb2, 0xb1, 0x6c, 0x50, 0x46, 0xb9, 0xf7, 0x00, 0xcb, 0x42, 0x99,
	0x61, 0xd1, 0x16, 0x52, 0x69, 0x3b, 0xfc, 0x52, 0xc1, 0x25, 0x61, 0x86, 0xc5, 0x15, 0xcf, 0x16,
	0x53, 0xa9, 0x05, 0x26, 0xfb, 0x50, 0xea, 0x8b, 0x51, 0x76, 0xff, 0xcd, 0xa7, 0xfb, 0x0b, 0xd4,
	0x8a, 0x45, 0x7c, 0x56, 0xf5, 0x3f, 0x1d, 0xd8, 0x2d, 0x94, 0xf7, 0x39, 0xd5, 0xc9, 0xf7, 0x70,
	0xd8, 0x88, 0x23, 0x5f, 0xd8, 0x63, 0xde, 0x8e, 0x65, 0x83, 0x4b, 0x29, 0xf8, 0x08, 0xb3, 0x89,
	0xb6, 0x7e, 0xd1, 0xfd, 0xcf, 0x81, 0xc3, 0xb5, 0xff, 0x2c, 0x33, 0xee, 0x9e, 0x50, 0x2a, 0x11,
	0x47, 0xf3, 0x71, 0x97, 0x41, 0x33, 0x59, 0x47, 0x32, 0x4e, 0xa6, 0x59, 0x52, 0x29, 0x20, 0x6f,
	0x00, 0x24, 0x0e, 0xc5, 0x54, 0x60, 0xa4, 0x15, 0x2d, 0x1d, 0x97, 0x4e, 0xca, 0x2c, 0xc7, 0x10,
	0x0f, 0xf6, 0x97, 0x31, 0x02, 0x81, 0xa1, 0xaf, 0xe8, 0x8b, 0xe3, 0xd2, 0x49, 0xe5, 0xec, 0xf3,
	0xe2, 0x09, 0x6c, 0x75, 0x1a, 0xec, 0xa1, 0x37, 0xf0, 0xba, 0x9d, 0xb6, 0xd7, 0xba, 0x6a, 0xb2,
	0x0f, 0xdc, 0xcc, 0x4d, 0x9a, 0x26, 0x8f, 0xa1, 0x18, 0xbe, 0xc7, 0x99, 0xa2, 0x9b, 0x56, 0x64,
	0xe5, 0x26, 0xf5, 0x6e, 0xce, 0xaf, 0xbc, 0xc6, 0x65, 0xeb, 0xa1, 0xcf, 0x72, 0xb6, 0xee, 0x1d,
	0xec, 0xad, 0xc8, 0x9b, 0x1e, 0x58, 0xd9, 0x28, 0xd7, 0x83, 0x05, 0x41, 0xbe, 0x86, 0x1a, 0x4f,
	0xf4, 0x38, 0x96, 0xe2, 0x0f, 0xf4, 0x13, 0x85, 0x92, 0x6e, 0xd8, 0x9d, 0xad, 0xb0, 0xee, 0x5b,
	0x80, 0x65, 0x48, 0x33, 0x02, 0x0c, 0x2b, 0xfc, 0x4c, 0x30, 0x43, 0xa6, 0xa6, 0xef, 0x71, 0x16,
	0x88, 0x70, 0xf1, 0x9b, 0xce, 0xe0, 0xd9, 0xdf, 0x0e, 0xd4, 0xce, 0xdb, 0x7d, 0xb3, 0x85, 0x7e,
	0xba, 0x05, 0xc2, 0xa0, 0x92, 0x7b, 0xc2, 0x90, 0x2f, 0xd6, 0xfc, 0x9f, 0x8b, 0xaf, 0x9b, 0xa3,
	0x8f, 0x3c, 0x18, 0xdc, 0x4f, 0x16, 0x9a, 0xe9, 0xe3, 0x63, 0xad, 0x66, 0xf1, 0x5d, 0xf2, 0x71,
	0xcd, 0xc7, 0x2d, 0xfb, 0x00, 0xfb, 0xee, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xf2, 0x25,
	0xe0, 0x8f, 0x09, 0x00, 0x00,
}
